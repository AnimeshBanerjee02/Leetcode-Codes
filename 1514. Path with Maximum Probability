from collections import defaultdict

class Solution:
    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start_node: int, end_node: int) -> float:
        graph = defaultdict(list)
        for i in range(len(edges)):
            u, v  = edges[i]
            graph[u].append((v, succProb[i]))
            graph[v].append((u, succProb[i]))
        
        max_prob = [0.0] * n
        max_prob[start_node] = 1.0
        heap = [(-1.0, start_node)]
        while heap:
            # Get the next node with the max probability from the heap
            prob_curr_node, curr_node = heapq.heappop(heap)
            # If it is the destination node
            if curr_node == end_node:
                return -prob_curr_node
            # Loop through all its neighbours
            for neighbour, prob_neighbour in graph[curr_node]:
                if -prob_curr_node * prob_neighbour > max_prob[neighbour]:
                    max_prob[neighbour] = -prob_curr_node * prob_neighbour
                    heapq.heappush(heap, (-max_prob[neighbour], neighbour))

        return 0.0
