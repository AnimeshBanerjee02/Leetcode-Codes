from typing import List
import sys

class Solution:
    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:
        # Constants
        INF = sys.maxsize
        ALPHABET_SIZE = 26
        
        # Convert characters to indices
        def char_to_index(c):
            return ord(c) - ord('a')
        
        # Initialize the cost matrix with infinity
        dist = [[INF] * ALPHABET_SIZE for _ in range(ALPHABET_SIZE)]
        
        # Distance from a node to itself is 0
        for i in range(ALPHABET_SIZE):
            dist[i][i] = 0
        
        # Populate the initial distances based on the given transformations
        for i in range(len(original)):
            u = char_to_index(original[i])
            v = char_to_index(changed[i])
            dist[u][v] = min(dist[u][v], cost[i])  # Consider the minimum cost if there are multiple transformations
        
        # Apply Floyd-Warshall to find the shortest paths between all pairs of characters
        for k in range(ALPHABET_SIZE):
            for i in range(ALPHABET_SIZE):
                for j in range(ALPHABET_SIZE):
                    if dist[i][k] < INF and dist[k][j] < INF:
                        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
        
        # Calculate the minimum cost to convert source to target
        total_cost = 0
        for s_char, t_char in zip(source, target):
            s_idx = char_to_index(s_char)
            t_idx = char_to_index(t_char)
            if dist[s_idx][t_idx] == INF:
                return -1  # Impossible to transform this character
            total_cost += dist[s_idx][t_idx]
        
        return total_cost
