class Solution:
    def countPaths(self, n: int, roads: List[List[int]]) -> int:
        
        graph = defaultdict(list)
        for source, destination, time in roads:
            graph[source] += [(destination, time)]
            graph[destination] += [(source, time)]
        
        times = [float('inf')] * n
        count = [0] * n
        heap = []
        times[0] = 0
        count[0] = 1
        heapq.heappush(heap, (0, 0))

        while heap:
            time, node = heapq.heappop(heap)
            if time > times[node]:
                continue
            for node_, time_ in graph[node]:
                new_time = time + time_
                if new_time < times[node_]:
                    count[node_] = count[node]
                    times[node_] = new_time 
                    heappush(heap, (new_time, node_))
                elif new_time == times[node_]:
                    count[node_] += count[node]
        
        
        return count[n-1] % (10**9 + 7)
