class MyCircularDeque:

    def __init__(self, k: int):
        self.result=[]
        self.l=k

    def insertFront(self, value: int) -> bool:
        if len(self.result)==self.l:
            return False
        if len(self.result)==0:
            self.result.append(value)
            return True
        self.result.append(0)
        for i in range(len(self.result)-1,0,-1):
            self.result[i]=self.result[i-1]
        self.result[0]=value
        return True

    def insertLast(self, value: int) -> bool:
        if len(self.result)==self.l:
            return False
        self.result.append(value)
        return True


    def deleteFront(self) -> bool:
        if len(self.result)==0:
            return False
        for i in range(len(self.result)-1):
            self.result[i]=self.result[i+1]
        self.result.pop()
        return True
        

    def deleteLast(self) -> bool:
        if len(self.result)==0:
            return False
        self.result.pop()
        return True



    def getFront(self) -> int:
        if len(self.result)==0:
            return -1
        return self.result[0]
        

    def getRear(self) -> int:
        if len(self.result)==0:
            return -1
        i=len(self.result)
        return self.result[i-1]

    def isEmpty(self) -> bool:
        if len(self.result)==0:
            return True
        return False

    def isFull(self) -> bool:
        if len(self.result)==self.l:
            return True
        return False
        


# Your MyCircularDeque object will be instantiated and called as such:
# obj = MyCircularDeque(k)
# param_1 = obj.insertFront(value)
# param_2 = obj.insertLast(value)
# param_3 = obj.deleteFront()
# param_4 = obj.deleteLast()
# param_5 = obj.getFront()
# param_6 = obj.getRear()
# param_7 = obj.isEmpty()
# param_8 = obj.isFull()
