from typing import List
from queue import PriorityQueue

class Solution:
    def swimInWater(self, grid: List[List[int]]) -> int:
        n = len(grid)
        left, right = grid[0][0], n * n - 1
        
        while left < right:
            mid = (left + right) // 2
            if not self.canReachDestination(grid, mid):
                left = mid + 1
            else:
                right = mid
        
        return left
    
    def canReachDestination(self, grid, time):
        n = len(grid)
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        visited = set()
        pq = PriorityQueue()
        pq.put((grid[0][0], 0, 0))  # Tuple: (elevation, row, column)
        
        while not pq.empty():
            elevation, i, j = pq.get()
            if (i, j) == (n - 1, n - 1):
                return True
            
            visited.add((i, j))
            
            for di, dj in directions:
                ni, nj = i + di, j + dj
                if 0 <= ni < n and 0 <= nj < n and grid[ni][nj] <= time and (ni, nj) not in visited:
                    pq.put((grid[ni][nj], ni, nj))
        
        return False
