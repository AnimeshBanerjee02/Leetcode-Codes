# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def get_swaps(self, nodes: list[TreeNode]) -> int:
        hashmap: dict[int, int] = dict()
        sorted_nodes: list[int] = []
        for idx in range(len(nodes)):
            hashmap[nodes[idx].val] = idx
            sorted_nodes.append(nodes[idx].val)
        sorted_nodes.sort()
        count: int = 0
        for idx in range(len(nodes)):
            if nodes[idx].val != sorted_nodes[idx]:
                count += 1
                valid_idx: int = hashmap[sorted_nodes[idx]]
                nodes[valid_idx].val = nodes[idx].val
                hashmap[nodes[idx].val] = valid_idx
        return count

    def minimumOperations(self, root: Optional[TreeNode]) -> int:
        cur_nodes: list[TreeNode] = [root]
        next_nodes: list[TreeNode] = []
        swaps: int = 0
        while cur_nodes:
            for node in cur_nodes:
                if node.left:
                    next_nodes.append(node.left)
                if node.right:
                    next_nodes.append(node.right)
            swaps += self.get_swaps(next_nodes)
            cur_nodes = next_nodes
            next_nodes = []
        return swaps
