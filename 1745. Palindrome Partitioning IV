class Solution:
    def checkPartitioning(self, s: str) -> bool:
        n = len(s)
        
        def is_palindrome(start, end):
            while start < end:
                if s[start] != s[end]:
                    return False
                start += 1
                end -= 1
            return True
        
        dp = [[False] * n for _ in range(n)]
        for i in range(n):
            dp[i][i] = True
            if i < n - 1 and s[i] == s[i + 1]:
                dp[i][i + 1] = True
        
        for length in range(3, n + 1):
            for start in range(n - length + 1):
                end = start + length - 1
                dp[start][end] = dp[start + 1][end - 1] and s[start] == s[end]
        
        for i in range(1, n - 1):
            for j in range(i + 1, n):
                if dp[0][i - 1] and dp[i][j - 1] and dp[j][n - 1]:
                    return True
        return False
