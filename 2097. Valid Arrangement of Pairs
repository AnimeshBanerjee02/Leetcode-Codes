class Solution:
    def validArrangement(self, pairs: List[List[int]]) -> List[List[int]]:

        res = []
        a_lists = defaultdict(list)  
        in_degree = defaultdict(int)
        out_degree = defaultdict(int)
    
        for u, v in pairs:
            a_lists[u].append(v)
            out_degree[u] += 1
            in_degree[v] += 1

        start = pairs[0][0]
         
        for node in a_lists:
            if out_degree[node] > in_degree[node]:
                start = node
                break
        def dfs(node):
            while a_lists[node]:

                next_node = a_lists[node].pop()

                dfs(next_node)

                res.append((node, next_node))

        dfs(start)

        return res[::-1]  



