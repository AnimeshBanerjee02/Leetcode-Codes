class Solution:
    def minimumSubarrayLength(self, nums: List[int], k: int) -> int:
        if k == 0:
            return 1
        def get_cur(freq):
            res = 0
            for i in range(len(freq)):
                if freq[i]:
                    res += 2 ** i
            return res

        def get_bits(n):
            return [int(c) for c in bin(n)[2:][::-1]]
        
        freq = [0] * 32
        
        l, ans = 0, -1
        for r in range(len(nums)):
            bits = get_bits(nums[r])
            for i in range(len(bits)):
                freq[i] += bits[i]
            
            while l < len(nums) and get_cur(freq) >= k:
                if ans == -1:
                    ans = r - l + 1
                else:
                    ans = min(ans, r - l + 1)
                
                bits = get_bits(nums[l])
                for i in range(len(bits)):
                    freq[i] -= bits[i]
                l += 1
        return ans
            
