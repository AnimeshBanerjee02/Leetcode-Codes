from typing import List, Dict, Deque
from collections import deque, defaultdict

class Solution:
    def buildMatrix(self, k: int, rowConditions: List[List[int]], colConditions: List[List[int]]) -> List[List[int]]:
        def topological_sort(k: int, conditions: List[List[int]]) -> List[int]:
            adj_list = defaultdict(list)
            in_degree = [0] * (k + 1)
            
            for u, v in conditions:
                adj_list[u].append(v)
                in_degree[v] += 1
            
            queue = deque()
            for i in range(1, k + 1):
                if in_degree[i] == 0:
                    queue.append(i)
            
            sorted_list = []
            while queue:
                node = queue.popleft()
                sorted_list.append(node)
                for neighbor in adj_list[node]:
                    in_degree[neighbor] -= 1
                    if in_degree[neighbor] == 0:
                        queue.append(neighbor)
            
            return sorted_list if len(sorted_list) == k else []

        row_order = topological_sort(k, rowConditions)
        col_order = topological_sort(k, colConditions)
        
        if not row_order or not col_order:
            return []
        
        row_pos = {num: i for i, num in enumerate(row_order)}
        col_pos = {num: i for i, num in enumerate(col_order)}
        
        matrix = [[0] * k for _ in range(k)]
        
        for num in range(1, k + 1):
            r = row_pos[num]
            c = col_pos[num]
            matrix[r][c] = num
        
        return matrix
